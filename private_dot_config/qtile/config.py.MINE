# In order to have dark theme in KDE6 apps (e.g. Dolphin), the file
# /etc/environment must be created with the following contents
"""
XDG_CURRENT_DESKTOP=KDE
XDG_SESSION_DESKTOP=KDE
KDE_SESSION_VERSION=6
"""

from libqtile import bar, layout, qtile, widget, extension
from libqtile.config import Click, Drag, Group, Key, KeyChord, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import colors

mod = "mod4"
terminal = "kitty"

# INFO:


@lazy.function
def minimize_all(qtile):
    for win in qtile.current_group.windows:
        if hasattr(win, "toggle_minimize"):
            win.toggle_minimize()


keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(),
        desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(),
        desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(),
        desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window",
    ),
    Key([mod], "t", lazy.window.toggle_floating(),
        desc="Toggle floating on the focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    # Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    # INFO: optional keys
    # Key([mod], 'r', lazy.run_extension(extension.DmenuRun(
    #     # dmenu_command="dmenu_run",
    #     dmenu_prompt=">",
    #     dmenu_font="Andika-8",
    #     background="#15181a",
    #     foreground="#00ff00",
    #     selected_background="#079822",
    #     selected_foreground="#fff",
    #     # dmenu_height=24,  # Only supported by some dmenu forks
    # ))),
    # INFO: Fn keys, from https://www.reddit.com/r/qtile/comments/17wokq0/comment/k9wqueo/
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume 0 +5%")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume 0 -5%")),
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-volume 0 -100%")),
    Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl set +5%")),
    Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl set 5%-")),

    Key([mod], "r", lazy.spawn("rofi -show drun"), desc="Run Rofi launcher"),
    Key([mod, "shift"], "m", minimize_all(),
        desc="Toggle hide/show all windows on current group"),
    KeyChord([mod], "p", [
        Key([], "r", lazy.spawn("dmenu --show drun"), desc="Show dmenu run")
        # Key([], "h", lazy.spawn("dm-hub -r"), desc='List all dmscripts'),
        # Key([], "a", lazy.spawn("dm-sounds -r"), desc='Choose ambient sound'),
        # Key([], "b", lazy.spawn("dm-setbg -r"), desc='Set background'),
        # Key([], "c", lazy.spawn("dtos-colorscheme -r"),
        #     desc='Choose color scheme'),
        # Key([], "e", lazy.spawn("dm-confedit -r"),
        #     desc='Choose a config file to edit'),
        # Key([], "i", lazy.spawn("dm-maim -r"), desc='Take a screenshot'),
        # Key([], "k", lazy.spawn("dm-kill -r"), desc='Kill processes '),
        # Key([], "m", lazy.spawn("dm-man -r"), desc='View manpages'),
        # Key([], "n", lazy.spawn("dm-note -r"), desc='Store and copy notes'),
        # Key([], "o", lazy.spawn("dm-bookman -r"), desc='Browser bookmarks'),
        # Key([], "p", lazy.spawn("rofi-pass"), desc='Logout menu'),
        # Key([], "q", lazy.spawn("dm-logout -r"), desc='Logout menu'),
        # Key([], "r", lazy.spawn("dm-radio -r"), desc='Listen to online radio'),
        # Key([], "s", lazy.spawn("dm-websearch -r"),
        #     desc='Search various engines'),
        # Key([], "t", lazy.spawn("dm-translate -r"), desc='Translate text')
    ])
]

# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(
                func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )


groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + group number = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + group number = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(
                    i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + group number = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

colors = colors.DoomOne

layout_theme = {"border_width": 2,
                "margin": 8,
                "border_focus": colors[8],
                "border_normal": colors[0]
                }


layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    layout.RatioTile(),
    # layout.Tile(),
    layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font="Hack",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        wallpaper="~/Pictures/2148232.png",
        wallpaper_mode="fill",
        top=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                # widget.TextBox("default conf", name="default"),
                # widget.TextBox("Press &lt;M-r&gt; to spawn",
                # foreground = "#d75f5f"),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(icon_size=20),
                widget.Wlan(
                    interface="wlp4s0",
                    foreground=colors[4],
                    mouse_callbacks={
                        'Button1': lambda: qtile.spawn(terminal + ' -e nmtui')},
                ),
                widget.TextBox("|"),
                widget.Battery(
                    battery=1,
                    mouse_callbacks={
                        # "Button1": change_battery,
                    },
                    notify_below=7,
                    foreground=colors[5],
                    format='{char} {percent:2.0%} {hour:d}:{min:02d}',
                ),
                widget.TextBox("|"),
                widget.Memory(
                    foreground=colors[8],
                    mouse_callbacks={
                        'Button1': lambda: qtile.spawn(terminal + ' -e htop')},
                    format='{MemUsed:.0f}{mm}',
                    # fmt='ðŸ–¥ {}',

                ),
                # widget.StatusNotifier("firefox"),
                widget.TextBox("|"),
                widget.Clock(foreground=colors[7], format="%d/%m/%y %a %H:%M"),
                widget.QuickExit(
                    default_text="[QQ]",
                    countdown_format="[ {} ]"),
            ],
            23,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = False
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
